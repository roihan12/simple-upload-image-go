version: "3.9"

services:
  app:
    container_name: golang_container
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    tty: true
    build: .
    ports:
      - 3000:3000
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - postgresdb
    networks:
      - learning

  postgresdb:
    image: postgres:14-alpine
    container_name: postgres_container
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    networks:
      - learning
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 10s
      retries: 5

  migrate:
    image: migrate/migrate:v4.15.2
    profiles: ["tools"]
    volumes:
      - ./database/migration:/migration
    networks:
      - learning
    entrypoint:
      [
        "migrate",
        "-path",
        "/migration",
        "-database",
        "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresdb:5432/${POSTGRES_DB}?sslmode=disable",
      ]
    command: ["up"]
    depends_on:
      postgresdb:
        condition: service_healthy
    restart: on-failure

volumes:
  pg_data:

# Networks to be created to facilitate communication between containers
networks:
  learning:
    driver: bridge
